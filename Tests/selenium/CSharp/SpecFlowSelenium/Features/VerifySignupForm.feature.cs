// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowSelenium.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Verify the signup form of Caregiver Tracker", SourceFile="Features\\VerifySignupForm.feature", SourceLine=0)]
    public partial class VerifyTheSignupFormOfCaregiverTrackerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VerifySignupForm.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Verify the signup form of Caregiver Tracker", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify whether the required error message is displayed when fields are left blank" +
            " in signup form", SourceLine=2)]
        public virtual void VerifyWhetherTheRequiredErrorMessageIsDisplayedWhenFieldsAreLeftBlankInSignupForm()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify whether the required error message is displayed when fields are left blank" +
                    " in signup form", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.Given("I open Caregiver Tracker website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.When("I enter \'\' in \'Email\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
    testRunner.Then("I should see the \'Email field is required\' error message below \'Email\' field in s" +
                        "ignup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
    testRunner.When("I enter \'\' in \'Password\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
    testRunner.Then("I should see the \'Password field is required\' error message below \'Password\' fiel" +
                        "d in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
    testRunner.When("I enter \'\' in \'Repeat Password\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then("I should see the \'Repeat Password field is required\' error message below \'Repeat " +
                        "Password\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.When("I enter \'\' in \'Full Name\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.Then("I should see the \'Full Name field is required\' error message below \'Full Name\' fi" +
                        "eld in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
    testRunner.When("I enter \'\' in \'Add Verify\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("I should see the \'Adding numbers is required\' error message below \'Add Verify\' fi" +
                        "eld in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify whether the required error message is displayed when invalid values are en" +
            "tered", SourceLine=15)]
        public virtual void VerifyWhetherTheRequiredErrorMessageIsDisplayedWhenInvalidValuesAreEntered()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify whether the required error message is displayed when invalid values are en" +
                    "tered", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
    testRunner.Given("I open Caregiver Tracker website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
    testRunner.When("I enter \'abc\' in \'Email\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    testRunner.Then("I should see the \'Please enter a valid email\' error message below \'Email\' field i" +
                        "n signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "abc",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "ABC",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "123",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "abcABC",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "abc123",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "abcABC123",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "abc@",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "ABC@",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "123@",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "abcABC@",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "aA123@",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
                table1.AddRow(new string[] {
                            "ABC@123@",
                            "Password should have atleast one uppercase, lowercase, number and special charact" +
                                "er"});
#line 20
    testRunner.When("I enter the following combinations in \'Password\' field in signup form and should " +
                        "see the relevant error message", ((string)(null)), table1, "When ");
#line hidden
#line 33
    testRunner.When("I enter different passwords in Password field and Repeat Password field in signup" +
                        " form and should see the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Full_Name",
                            "Full name cannot have number or special characters"});
                table2.AddRow(new string[] {
                            "Full1Name",
                            "Full name cannot have number or special characters"});
#line 34
    testRunner.When("I enter the following combinations in \'Full Name\' field in signup form and should" +
                        " see the relevant error message", ((string)(null)), table2, "When ");
#line hidden
#line 37
    testRunner.When("I get label text of Add Verify field in signup form and enter \'incorrect value\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
    testRunner.Then("I should see the \'Not properly added!\' error message below \'Add Verify\' field in " +
                        "signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.Then("I should see the Sign me Up! button in signup form is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("\'Sign me Up!\' button should be enabled if all required fields are given valid val" +
            "ues", SourceLine=40)]
        public virtual void SignMeUpButtonShouldBeEnabledIfAllRequiredFieldsAreGivenValidValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\'Sign me Up!\' button should be enabled if all required fields are given valid val" +
                    "ues", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
    testRunner.Given("I open Caregiver Tracker website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
    testRunner.When("I enter \'abc@gmail.com\' in \'Email\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.And("I enter \'abcABC123@\' in \'Password\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("I enter \'abcABC123@\' in \'Repeat Password\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("I enter \'Caregiver\' in \'Full Name\' field in signup form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And("I get label text of Add Verify field in signup form and enter \'correct value\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.Then("I should see the Sign me Up! button in signup form is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
